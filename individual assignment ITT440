#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>

#define max 10

int pipefd[max][2];
int ChildNum = 0;

void interrupt_handler(int sig)
{
printf("\n Interrupt signal detected.. \n");
exit(0);
}

void ChildProcess() {
if (ChildNum >= max) {
printf("You reach limit of child processes: %d \n", max);
return;
}

if (pipe(pipefd[ChildNum]) < 0) {
perror("pipe");
exit(1);
}

pid_t pid = fork();
if (pid<0) {
perror("fork");
exit(1);
}

else if (pid==0) {
close (pipefd[ChildNum][1]);

char message[100];
read (pipefd[ChildNum][0], message, sizeof(message));
printf("Child process %d receive message: %s \n", getpid(), message);

close(pipefd[ChildNum][0]);
exit(0);
}
else{
close(pipefd[ChildNum][0]);

ChildNum++;

printf("Child process %d created. \n", pid);
}
}

int main(){
signal(SIGINT, interrupt_handler);

while (1){
printf("\n Enter message to send child processes: ");
char message[100];
fgets (message, sizeof(message), stdin);

message[strcspn(message, "\n")] = 0;

for(int i=0; i< ChildNum; i++) {
write(pipefd[i][1], message, strlen(message) +1);
}
}
}
